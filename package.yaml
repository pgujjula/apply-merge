# SPDX-FileCopyrightText: Copyright Preetham Gujjula
# SPDX-License-Identifier: BSD-3-Clause
name:        apply-merge
version:     0.1.0.0
synopsis:    Lift a binary, non-decreasing function onto ordered lists and order the output
description: Please see the README on GitHub at <https://github.com/pgujjula/apply-merge#readme>
category:    Data
stability:   experimental
github:      "pgujjula/apply-merge"
author:      "Preetham Gujjula"
maintainer:  "Preetham Gujjula <libraries@mail.preetham.io>"
copyright:   "Preetham Gujjula"
license:     BSD-3-Clause

tested-with:
- GHC == 9.2.8
- GHC == 9.4.8
- GHC == 9.6.4
- GHC == 9.8.2

extra-doc-files:
- README.md
- ChangeLog.md
- docs/ALGORITHM.md
- LICENSES/BSD-3-Clause.txt

language: GHC2021

ghc-options:
- -Wall
- -Wunused-packages

dependencies:
- base ^>= {4.16, 4.17, 4.18, 4.19}

library:
  source-dirs: src
  exposed-modules:
  - Data.List.ApplyMerge
  other-modules:
  - Data.List.ApplyMerge.IntSet
  dependencies:
  - containers ^>= {0.6}
  - pqueue ^>= {1.4, 1.5}

# The library implements apply-merge in a few different ways, with slightly
# different performance characteristics, but only exports the current best
# implementation. But we wish to retain all the implementations, in case
# we are able to optimize a different implementation in the future to be better
# than the current best.
#
# So, we structure the test and benchmark suites to cover all the
# implementations, not just the one exposed by the library. To do this, the test
# and benchmark suites don't import the library, and instead directly include
# the src/ files.
tests:
  apply-merge-tests:
    source-dirs:
    - src
    - test
    main: Main.hs
    other-modules:
    - Data.DoublyLinkedList.STRef
    - Data.List.ApplyMerge
    - Data.List.ApplyMerge.DoublyLinkedList
    - Data.List.ApplyMerge.IntMap
    - Data.List.ApplyMerge.IntSet
    - Data.PQueue.Prio.Min.Mutable
    - Test.Data.DoublyLinkedList.STRef
    - Test.Data.List.ApplyMerge.Common
    - Test.Data.List.ApplyMerge.DoublyLinkedList
    - Test.Data.List.ApplyMerge.IntMap
    - Test.Data.List.ApplyMerge.IntSet
    - Test.Data.PQueue.Prio.Min.Mutable
    dependencies:
    - containers ^>= {0.6}
    - pqueue ^>= {1.4, 1.5}
    - tasty ^>= {1.4, 1.5}
    - tasty-expected-failure ^>= {0.12}
    - tasty-hunit ^>= {0.10}
    - tasty-quickcheck ^>= {0.10}
    - transformers ^>= {0.5, 0.6}
    - vector ^>= {0.12, 0.13}

benchmarks:
  apply-merge-benchmarks:
    source-dirs:
    - src
    - bench
    main: Main.hs
    other-modules:
    - Data.DoublyLinkedList.STRef
    - Data.List.ApplyMerge
    - Data.List.ApplyMerge.DoublyLinkedList
    - Data.List.ApplyMerge.IntMap
    - Data.List.ApplyMerge.IntSet
    - Data.PQueue.Prio.Min.Mutable
    - Bench.Data.DoublyLinkedList.STRef
    - Bench.PriorityQueue.MinPQueue
    - Bench.PriorityQueue.MinPQueue.Mutable
    dependencies:
    - containers ^>= {0.6}
    - pqueue ^>= {1.4, 1.5}
    - tasty-bench ^>= {0.3}
    - transformers ^>= {0.5, 0.6}
    - vector ^>= {0.12, 0.13}
